pipeline {
    agent any
    
    tools {
        jdk 'jdk17'
        maven 'maven3'
    }
    
    environment {
        SCANNER_HOME= tool 'sonar-scanner'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', changelog: false, poll: false, url: 'https://github.com/gouthamc125/Mission.git'
            }
        }
        
        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }
        
        stage('Unit Test') {
            steps {
                sh "mvn test -DskipTests=true"
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=Mission -Dsonar.projectName=Mission \
                            -Dsonar.java.binaries=. '''
                }
            }
        }
        
        stage('Filesystem Scan Trivy') {
            steps{
                sh "trivy fs --format table -o trivyfs-report.html ."
            }
        }
        
        stage('Build') {
            steps {
                sh "mvn package -DskipTests=true"
            }
        }
        
        stage("Build & Tag Docker Image") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh 'docker build -t mission:latest .'
                        sh 'docker tag mission:latest gouthamc125/mission:latest'
                        sh 'docker push gouthamc125/mission:latest'
                    }
                }
            }
        }
        
        stage('Image Scan Trivy') {
            steps{
                sh "trivy image --format table -o trivy-image-report.html gouthamc125/mission:latest"
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'EKS-1', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://4D567E4B808E74FC096112B0CAE5CE4A.gr7.eu-west-1.eks.amazonaws.com') {
                    sh "kubectl apply -f ds.yml"
                }
            }
        }
        
        stage('Verify Kubernetes') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'EKS-1', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://4D567E4B808E74FC096112B0CAE5CE4A.gr7.eu-west-1.eks.amazonaws.com') {
                    sh 'kubectl get pods'
                    sh 'kubectl get svc'
                }
            }
        }

    }
}

